# Multi-stage Dockerfile for API Gateway - Production Optimized
# Adaptive Learning Ecosystem - EbroValley Digital

# =============================================================================
# STAGE 1: Dependencies Installation
# =============================================================================
FROM node:20-alpine AS dependencies

LABEL maintainer="EbroValley Digital <dev@ebrovalley.com>"
LABEL description="Adaptive Learning Ecosystem - API Gateway (Production)"

# Create app directory
WORKDIR /app

# Install system dependencies for better performance
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY api-gateway/package*.json ./

# Install dependencies with optimizations
RUN npm ci --only=production --silent --no-audit --no-fund \
    && npm cache clean --force

# =============================================================================
# STAGE 2: Build Stage
# =============================================================================
FROM node:20-alpine AS build

WORKDIR /app

# Copy package files and install all dependencies (including dev)
COPY api-gateway/package*.json ./
RUN npm ci --silent --no-audit --no-fund

# Copy source code
COPY api-gateway/src ./src
COPY api-gateway/tsconfig*.json ./
COPY api-gateway/nest-cli.json ./

# Build the application
RUN npm run build

# =============================================================================
# STAGE 3: Production Stage
# =============================================================================
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init curl tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nestjs -u 1001

WORKDIR /app

# Copy production dependencies from dependencies stage
COPY --from=dependencies --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copy built application from build stage
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/package*.json ./

# Create logs directory
RUN mkdir -p logs && chown nestjs:nodejs logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=4000
ENV LOG_LEVEL=info

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:4000/health || exit 1

# Switch to non-root user
USER nestjs

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]
# Docker Compose - Production Deployment
# Adaptive Learning Ecosystem - EbroValley Digital
# Complete infrastructure orchestration

version: '3.8'

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local

services:
  # Frontend - React + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: adaptive-frontend
    restart: unless-stopped
    ports:
      - "80:8080"
      - "443:8080"
    networks:
      - app-network
    volumes:
      - nginx_logs:/var/log/nginx
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://api-gateway:4000
      - VITE_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - VITE_GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - api-gateway
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.ebrovalley.digital`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "com.ebrovalley.service=frontend"
      - "com.ebrovalley.version=2.0.0"

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: adaptive-api-gateway
    restart: unless-stopped
    ports:
      - "4000:4000"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - PORT=4000
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://app.ebrovalley.digital
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=100
      - LOG_LEVEL=info
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.ebrovalley.digital`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"

  # Database - PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: adaptive-postgres
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-adaptive_learning}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-adaptive_learning}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c wal_buffers=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Cache - Redis
  redis:
    image: redis:7-alpine
    container_name: adaptive-redis
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Reverse Proxy - Traefik
  traefik:
    image: traefik:v3.0
    container_name: adaptive-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/certs:/etc/traefik/certs
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.ebrovalley.digital`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: adaptive-prometheus
    restart: unless-stopped
    networks:
      - app-network
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: adaptive-grafana
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.ebrovalley.digital`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
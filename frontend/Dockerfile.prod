# Multi-stage Dockerfile for Frontend - Production Optimized
# Adaptive Learning Ecosystem - EbroValley Digital

# =============================================================================
# STAGE 1: Dependencies and Build
# =============================================================================
FROM node:20-alpine AS build

LABEL maintainer="EbroValley Digital <dev@ebrovalley.com>"
LABEL description="Adaptive Learning Ecosystem - Frontend PWA (Production)"

# Set environment variables for build
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false

# Install system dependencies
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files for better caching
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production --silent --no-audit --no-fund \
    && npm cache clean --force

# Copy source code
COPY frontend/ ./

# Accept build arguments for environment configuration
ARG VITE_API_URL
ARG VITE_WS_URL
ARG VITE_ENVIRONMENT=production

# Set build-time environment variables
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_WS_URL=${VITE_WS_URL}
ENV VITE_ENVIRONMENT=${VITE_ENVIRONMENT}

# Build the application
RUN npm run build

# Optimize and compress build artifacts
RUN find dist -name "*.js" -exec gzip -k {} \; \
    && find dist -name "*.css" -exec gzip -k {} \; \
    && find dist -name "*.html" -exec gzip -k {} \;

# =============================================================================
# STAGE 2: Production Nginx Server
# =============================================================================
FROM nginx:1.25-alpine AS production

# Install additional tools
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nginx-app \
    && adduser -S nginx-app -u 1001 -G nginx-app

# Copy built application from build stage
COPY --from=build --chown=nginx-app:nginx-app /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY frontend/nginx.prod.conf /etc/nginx/nginx.conf
COPY frontend/nginx-default.conf /etc/nginx/conf.d/default.conf

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run \
    && chown -R nginx-app:nginx-app /var/cache/nginx /var/log/nginx /var/run \
    && chmod -R 755 /usr/share/nginx/html

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1><p>Frontend is healthy</p></body></html>' > /usr/share/nginx/html/health

# Security: Remove default nginx user and use our custom user
RUN sed -i 's/user nginx;/user nginx-app;/g' /etc/nginx/nginx.conf

# Set environment variables
ENV NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
ENV NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Switch to non-root user
USER nginx-app

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
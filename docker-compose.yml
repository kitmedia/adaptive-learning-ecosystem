# Docker Compose - Adaptive Learning Ecosystem
# EbroValley Digital - Production Ready Configuration
# Autor: ToñoAdPAOS & Claudio Supreme

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: adaptive-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: adaptive_learning
      POSTGRES_USER: adaptive_user
      POSTGRES_PASSWORD: adaptive_password_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql_setup.py:/docker-entrypoint-initdb.d/init.py
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adaptive_user -d adaptive_learning"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - adaptive-network

  # Redis Cache (for sessions and caching)
  redis:
    image: redis:7-alpine
    container_name: adaptive-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass adaptive_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - adaptive-network

  # AI Tutor Service
  ai-tutor-service:
    build:
      context: ./services/ai-tutor
      dockerfile: Dockerfile
    container_name: adaptive-ai-tutor
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - AI_TUTOR_PORT=5001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=adaptive_redis_2024
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - adaptive-network
    volumes:
      - ./shared:/app/shared:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Progress Tracking Service
  progress-tracking-service:
    build:
      context: ./services/progress-tracking
      dockerfile: Dockerfile
    container_name: adaptive-progress-tracking
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PROGRESS_TRACKING_PORT=5004
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=adaptive_redis_2024
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - adaptive-network
    volumes:
      - ./shared:/app/shared:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Assessment Service
  assessment-service:
    build:
      context: ./services/assessment
      dockerfile: Dockerfile
    container_name: adaptive-assessment
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - ASSESSMENT_PORT=5005
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=adaptive_redis_2024
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - adaptive-network
    volumes:
      - ./shared:/app/shared:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: adaptive-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_PORT=4000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_password_2024
      - JWT_SECRET=adaptive_learning_jwt_secret_2024_toño_claudio
      - JWT_REFRESH_SECRET=adaptive_learning_refresh_secret_2024_toño_claudio
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - AI_TUTOR_HOST=ai-tutor-service
      - AI_TUTOR_PORT=5001
      - PROGRESS_TRACKING_HOST=progress-tracking-service
      - PROGRESS_TRACKING_PORT=5004
      - ASSESSMENT_HOST=assessment-service
      - ASSESSMENT_PORT=5005
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=adaptive_redis_2024
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-tutor-service:
        condition: service_healthy
      progress-tracking-service:
        condition: service_healthy
      assessment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - adaptive-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: adaptive-frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://localhost:4000
    ports:
      - "3000:3000"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - adaptive-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: adaptive-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - adaptive-network
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: adaptive-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=adaptive_grafana_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - adaptive-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  adaptive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
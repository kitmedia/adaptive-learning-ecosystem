# Security Workflow - Adaptive Learning Ecosystem
# EbroValley Digital - Automated Security Scanning

name: 🔒 Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # ==========================================
  # DEPENDENCY VULNERABILITY SCAN
  # ==========================================
  dependency-scan:
    name: 🔍 Dependency Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install dependencies
      working-directory: frontend
      run: npm ci --audit-level=moderate
    
    - name: 🔍 NPM Audit
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json
        npm audit --audit-level=moderate
    
    - name: 🔒 Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json
        command: test
        json: true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-dependency-reports
        path: |
          frontend/npm-audit.json
          snyk-report.json
        retention-days: 30

  # ==========================================
  # CODE SECURITY ANALYSIS
  # ==========================================
  code-analysis:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        queries: security-and-quality
    
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
    
    - name: 🔒 ESLint Security Rules
      working-directory: frontend
      run: |
        npm ci
        npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.js --format=json --output-file=eslint-security.json || true
    
    - name: 📊 Upload ESLint security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-security-report
        path: frontend/eslint-security.json
        retention-days: 30

  # ==========================================
  # CONTAINER SECURITY SCAN
  # ==========================================
  container-security:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        component: [frontend]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Build Docker image
      run: |
        docker build -t security-scan:${{ matrix.component }} ./${{ matrix.component }}
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan:${{ matrix.component }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.component }}.sarif'
    
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.component }}.sarif'
    
    - name: 🔒 Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          docker/docker-bench-security > docker-bench-results.txt || true
    
    - name: 📊 Upload Docker Bench results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-${{ matrix.component }}
        path: |
          trivy-results-${{ matrix.component }}.sarif
          docker-bench-results.txt
        retention-days: 30

  # ==========================================
  # SECRET SCANNING
  # ==========================================
  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: 🔍 GitLeaks Secret Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # ==========================================
  # INFRASTRUCTURE SECURITY
  # ==========================================
  infrastructure-security:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Terraform Security Scan
      if: hashFiles('**/*.tf') != ''
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
    
    - name: 🔍 Kubernetes Security Scan
      if: hashFiles('**/*.yaml', '**/*.yml') != ''
      run: |
        # Install kube-score
        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
        tar xzf kube-score_1.16.1_linux_amd64.tar.gz
        chmod +x kube-score
        
        # Scan Kubernetes manifests
        find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes)" | xargs ./kube-score score || true
    
    - name: 🔍 Docker Compose Security
      run: |
        # Check for security issues in docker-compose files
        if [ -f "docker-compose.prod.yml" ]; then
          echo "Checking Docker Compose security..."
          
          # Check for privileged containers
          if grep -q "privileged.*true" docker-compose.prod.yml; then
            echo "❌ WARNING: Privileged containers detected"
          else
            echo "✅ No privileged containers found"
          fi
          
          # Check for host network mode
          if grep -q "network_mode.*host" docker-compose.prod.yml; then
            echo "❌ WARNING: Host network mode detected"
          else
            echo "✅ No host network mode found"
          fi
          
          # Check for host volume mounts
          if grep -q "/:" docker-compose.prod.yml; then
            echo "⚠️  WARNING: Host volume mounts detected - review carefully"
          fi
        fi

  # ==========================================
  # SECURITY REPORT GENERATION
  # ==========================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, container-security, secret-scan, infrastructure-security]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: 📊 Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" > SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        echo "**Scan Date:** $(date)" >> SECURITY_REPORT.md
        echo "**Commit:** ${{ github.sha }}" >> SECURITY_REPORT.md
        echo "**Branch:** ${{ github.ref_name }}" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        
        echo "## 📋 Scan Results" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        
        # Check job statuses
        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ **Dependency Scan:** PASSED" >> SECURITY_REPORT.md
        else
          echo "❌ **Dependency Scan:** FAILED" >> SECURITY_REPORT.md
        fi
        
        if [ "${{ needs.code-analysis.result }}" = "success" ]; then
          echo "✅ **Code Analysis:** PASSED" >> SECURITY_REPORT.md
        else
          echo "❌ **Code Analysis:** FAILED" >> SECURITY_REPORT.md
        fi
        
        if [ "${{ needs.container-security.result }}" = "success" ]; then
          echo "✅ **Container Security:** PASSED" >> SECURITY_REPORT.md
        else
          echo "❌ **Container Security:** FAILED" >> SECURITY_REPORT.md
        fi
        
        if [ "${{ needs.secret-scan.result }}" = "success" ]; then
          echo "✅ **Secret Scan:** PASSED" >> SECURITY_REPORT.md
        else
          echo "❌ **Secret Scan:** FAILED" >> SECURITY_REPORT.md
        fi
        
        if [ "${{ needs.infrastructure-security.result }}" = "success" ]; then
          echo "✅ **Infrastructure Security:** PASSED" >> SECURITY_REPORT.md
        else
          echo "❌ **Infrastructure Security:** FAILED" >> SECURITY_REPORT.md
        fi
        
        echo "" >> SECURITY_REPORT.md
        echo "## 🔗 Detailed Reports" >> SECURITY_REPORT.md
        echo "Check the Actions artifacts for detailed security scan reports." >> SECURITY_REPORT.md
    
    - name: 📊 Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: SECURITY_REPORT.md
        retention-days: 90
    
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('SECURITY_REPORT.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
# üìä Adaptive Learning Ecosystem - Monitoring Stack
# EbroValley Digital - Production-Grade Monitoring with Prometheus & Grafana

version: '3.8'

networks:
  monitoring:
    driver: bridge
  ecosystem:
    external: true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # üìä Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: adaptive-learning-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - ecosystem
    depends_on:
      - node-exporter
      - redis-exporter
    labels:
      - "monitoring.service=prometheus"
      - "monitoring.description=Metrics collection and storage"

  # üìà Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: adaptive-learning-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=adaptive-learning-2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    labels:
      - "monitoring.service=grafana"
      - "monitoring.description=Metrics visualization and alerting"

  # üö® Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: adaptive-learning-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    labels:
      - "monitoring.service=alertmanager"
      - "monitoring.description=Alert routing and management"

  # üíª Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: adaptive-learning-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    labels:
      - "monitoring.service=node-exporter"
      - "monitoring.description=System and hardware metrics"

  # üî¥ Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.54.0
    container_name: adaptive-learning-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=host.docker.internal:6379
      - REDIS_PASSWORD=""
    networks:
      - monitoring
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "monitoring.service=redis-exporter"
      - "monitoring.description=Redis performance metrics"

  # üåê Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: adaptive-learning-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox:/etc/blackbox_exporter:ro
    networks:
      - monitoring
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "monitoring.service=blackbox-exporter"
      - "monitoring.description=HTTP endpoint health checks"

  # üìä cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: adaptive-learning-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    labels:
      - "monitoring.service=cadvisor"
      - "monitoring.description=Container resource usage metrics"

  # üìù Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: adaptive-learning-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki:/etc/loki:ro
    networks:
      - monitoring
    labels:
      - "monitoring.service=loki"
      - "monitoring.description=Log aggregation and storage"

  # üì§ Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: adaptive-learning-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/adaptive-learning:ro
      - ./monitoring/promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki
    labels:
      - "monitoring.service=promtail"
      - "monitoring.description=Log collection and forwarding"

  # ‚ö° Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49.0
    container_name: adaptive-learning-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - monitoring
    labels:
      - "monitoring.service=jaeger"
      - "monitoring.description=Distributed tracing and performance monitoring"

  # üìä Grafana Renderer - Image Rendering
  grafana-renderer:
    image: grafana/grafana-image-renderer:3.7.1
    container_name: adaptive-learning-grafana-renderer
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ENABLE_METRICS=true
      - HTTP_PORT=8081
    networks:
      - monitoring
    labels:
      - "monitoring.service=grafana-renderer"
      - "monitoring.description=Dashboard image and PDF rendering"

  # üîÑ Pushgateway - Batch Job Metrics
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: adaptive-learning-pushgateway
    restart: unless-stopped
    ports:
      - "9091:9091"
    networks:
      - monitoring
    labels:
      - "monitoring.service=pushgateway"
      - "monitoring.description=Metrics collection for batch jobs"

  # üåê Nginx - Monitoring Reverse Proxy
  monitoring-nginx:
    image: nginx:1.25-alpine
    container_name: adaptive-learning-monitoring-nginx
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./monitoring/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - monitoring
    depends_on:
      - grafana
      - prometheus
      - alertmanager
    labels:
      - "monitoring.service=nginx"
      - "monitoring.description=Reverse proxy for monitoring services"

  # üìà Monitoring Init Container
  monitoring-init:
    image: busybox:1.35
    container_name: adaptive-learning-monitoring-init
    volumes:
      - prometheus_data:/prometheus
      - grafana_data:/grafana
      - alertmanager_data:/alertmanager
    command: |
      sh -c "
        echo 'üöÄ Initializing monitoring stack...'
        chown -R 472:472 /grafana
        chown -R 65534:65534 /prometheus
        chown -R 65534:65534 /alertmanager
        echo '‚úÖ Monitoring stack initialized'
      "
    networks:
      - monitoring
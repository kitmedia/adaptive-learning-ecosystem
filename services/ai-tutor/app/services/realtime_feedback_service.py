"""
Real-Time Feedback Service - Retroalimentaci√≥n Inmediata Personalizada
Adaptive Learning Ecosystem - EbroValley Digital
To√±oAdPAOS & Claudio Supreme

Implementa feedback en tiempo real manteniendo al estudiante en su "zona de aprendizaje √≥ptima"
siguiendo metodolog√≠as Knewton, Khan Academy y Coursera
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
import numpy as np
import random
from enum import Enum

from ..models.learning_models import (
    StudentLearningProfile, LearningActivity, RealTimeFeedback,
    LearningStyle, DifficultyLevel, ContentType, AdaptationDecision
)

logger = logging.getLogger(__name__)

class FeedbackType(str, Enum):
    ENCOURAGEMENT = "encouragement"
    CORRECTION = "correction"
    HINT = "hint"
    CELEBRATION = "celebration"
    WARNING = "warning"
    MOTIVATION = "motivation"
    GUIDANCE = "guidance"

class LearningZone(str, Enum):
    COMFORT = "comfort"  # Muy f√°cil - aburrimiento
    OPTIMAL = "optimal"  # Zona de aprendizaje √≥ptima
    CHALLENGE = "challenge"  # Dif√≠cil pero manejable
    PANIC = "panic"  # Muy dif√≠cil - frustraci√≥n

class RealTimeFeedbackService:
    """
    Servicio de retroalimentaci√≥n inmediata personalizada
    Mantiene al estudiante en su zona de aprendizaje √≥ptima
    """
    
    def __init__(self):
        self.feedback_templates = self._initialize_feedback_templates()
        self.learning_zone_thresholds = {
            "comfort_max": 0.9,    # >90% precisi√≥n = zona confort
            "optimal_min": 0.65,   # 65-90% = zona √≥ptima
            "optimal_max": 0.9,
            "challenge_min": 0.4,  # 40-65% = zona desaf√≠o
            "panic_threshold": 0.4  # <40% = zona p√°nico
        }
        
    def _initialize_feedback_templates(self) -> Dict[str, Dict[str, List[str]]]:
        """Inicializar plantillas de feedback por estilo de aprendizaje"""
        return {
            "visual": {
                "encouragement": [
                    "üéØ ¬°Excelente! Puedes ver claramente el patr√≥n en este problema",
                    "üìä Tu comprensi√≥n visual est√° mejorando notablemente",
                    "üîç Est√°s conectando las ideas de manera muy visual",
                    "üìà ¬°Fant√°stico progreso! El diagrama te est√° ayudando mucho"
                ],
                "correction": [
                    "üëÄ Observa este diagrama m√°s detenidamente - hay un detalle importante",
                    "üìã Revisa la imagen: la respuesta est√° en los elementos visuales",
                    "üé® Imagina este concepto como un mapa mental - ¬øqu√© conexiones ves?",
                    "üìê Mira este esquema paso a paso para entender mejor"
                ],
                "hint": [
                    "üí° Pista visual: F√≠jate en los colores del diagrama",
                    "üó∫Ô∏è Dibuja mentalmente la estructura del problema",
                    "üìä ¬øQu√© patrones visuales puedes identificar aqu√≠?",
                    "üéØ Imagina c√≥mo se ver√≠a la soluci√≥n en un gr√°fico"
                ],
                "celebration": [
                    "üåü ¬°INCRE√çBLE! Has visualizado la soluci√≥n perfectamente",
                    "üéä ¬°Maestr√≠a visual alcanzada! Tu manera de ver los problemas es excepcional",
                    "üèÜ ¬°Eres un genio visual! Has conectado todas las piezas"
                ]
            },
            "auditory": {
                "encouragement": [
                    "üéµ ¬°Perfecto! Est√°s escuchando las explicaciones con atenci√≥n",
                    "üîä Tu comprensi√≥n auditiva est√° en excelente forma",
                    "üìª ¬°Genial! Est√°s procesando la informaci√≥n de manera clara",
                    "üéß ¬°Fant√°stico! Tu o√≠do para los detalles es impresionante"
                ],
                "correction": [
                    "üëÇ Escucha nuevamente la explicaci√≥n - hay una palabra clave",
                    "üîä Repite en voz alta el concepto para interiorizarlo mejor",
                    "üì¢ ¬øPuedes repetir el proceso paso a paso en voz alta?",
                    "üéµ Intenta explicarte el problema como si fuera una historia"
                ],
                "hint": [
                    "üí≠ Pista auditiva: Repite mentalmente la definici√≥n",
                    "üéôÔ∏è ¬øQu√© te dice tu voz interior sobre este problema?",
                    "üîä Escucha el patr√≥n en la secuencia de n√∫meros",
                    "üìª Imagina una conversaci√≥n sobre este tema"
                ],
                "celebration": [
                    "üéâ ¬°EXCELENTE! Has escuchado y procesado perfectamente",
                    "üéµ ¬°Sinfon√≠a de √©xito! Tu comprensi√≥n auditiva es magistral",
                    "üìØ ¬°Bravo! Tu capacidad de escucha activa es extraordinaria"
                ]
            },
            "kinesthetic": {
                "encouragement": [
                    "üí™ ¬°Genial! Tu enfoque pr√°ctico est√° dando resultados",
                    "üèÉ ¬°Excelente! Aprendes mejor haciendo y experimentando",
                    "üîß ¬°Perfecto! Tu m√©todo hands-on es muy efectivo",
                    "‚ö° ¬°Fant√°stico! Tu energ√≠a pr√°ctica te impulsa"
                ],
                "correction": [
                    "üî® Intenta resolver este problema paso a paso, con calma",
                    "üß™ Experimenta con diferentes enfoques hasta encontrar el correcto",
                    "üèóÔ∏è Construye la soluci√≥n bloque por bloque",
                    "‚öôÔ∏è Practica el movimiento o proceso hasta dominarlo"
                ],
                "hint": [
                    "üéØ Pista pr√°ctica: Simula el problema con objetos reales",
                    "üîß ¬øQu√© pasar√≠a si lo intentaras de manera diferente?",
                    "üí° Mueve las piezas mentalmente hasta que encajen",
                    "üèÉ Camina mientras piensas en la soluci√≥n"
                ],
                "celebration": [
                    "üéä ¬°INCRE√çBLE! Tu enfoque pr√°ctico ha triunfado",
                    "üèÜ ¬°Maestro de la acci√≥n! Has dominado este desaf√≠o",
                    "‚ö° ¬°Energ√≠a pura! Tu m√©todo kinest√©sico es imparable"
                ]
            },
            "reading_writing": {
                "encouragement": [
                    "üìö ¬°Excelente! Tu an√°lisis textual es muy profundo",
                    "‚úçÔ∏è ¬°Perfecto! Tu capacidad de s√≠ntesis es impresionante",
                    "üìù ¬°Genial! Est√°s tomando notas muy efectivas",
                    "üìñ ¬°Fant√°stico! Tu comprensi√≥n lectora est√° en su mejor momento"
                ],
                "correction": [
                    "üìã Revisa tus notas - la respuesta est√° en lo que escribiste",
                    "üìù Escribe un resumen del problema para clarificar ideas",
                    "üìö Lee el enunciado nuevamente, prestando atenci√≥n a cada palabra",
                    "‚úèÔ∏è Anota los pasos que has seguido para encontrar el error"
                ],
                "hint": [
                    "üí≠ Pista textual: Busca palabras clave en el enunciado",
                    "üìù Escribe lo que sabes y lo que necesitas encontrar",
                    "üìö ¬øQu√© definici√≥n o f√≥rmula aplica aqu√≠?",
                    "‚úçÔ∏è Haz una lista de los pasos necesarios"
                ],
                "celebration": [
                    "üåü ¬°MAGISTRAL! Tu an√°lisis textual ha sido perfecto",
                    "üìö ¬°Erudito del conocimiento! Tu dominio escrito es excepcional",
                    "‚úçÔ∏è ¬°Genio de las palabras! Has articulado la soluci√≥n perfectamente"
                ]
            }
        }
    
    async def generate_realtime_feedback(
        self,
        student_id: str,
        current_activity: LearningActivity,
        profile: StudentLearningProfile,
        performance_context: Dict[str, Any]
    ) -> RealTimeFeedback:
        """Generar feedback inmediato personalizado basado en contexto actual"""
        
        logger.info(f"Generating real-time feedback for student {student_id}")
        
        # 1. Determinar zona de aprendizaje actual
        learning_zone = self._determine_learning_zone(current_activity, performance_context)
        
        # 2. Analizar tipo de feedback necesario
        feedback_type = self._determine_feedback_type(learning_zone, current_activity, performance_context)
        
        # 3. Generar mensaje personalizado seg√∫n estilo de aprendizaje
        message = self._generate_personalized_message(
            feedback_type, profile.learning_style, performance_context
        )
        
        # 4. Generar acciones sugeridas
        suggested_actions = self._generate_suggested_actions(
            learning_zone, feedback_type, profile, current_activity
        )
        
        # 5. Calcular nivel de confianza del feedback
        confidence = self._calculate_feedback_confidence(performance_context, profile)
        
        feedback = RealTimeFeedback(
            student_id=student_id,
            activity_id=current_activity.activity_id,
            feedback_type=feedback_type.value,
            message=message,
            suggested_actions=suggested_actions,
            confidence_level=confidence,
            generated_at=datetime.now(),
            is_personalized=True
        )
        
        # 6. Log para an√°lisis y mejora continua
        self._log_feedback_analytics(student_id, learning_zone, feedback_type, confidence)
        
        return feedback
    
    def _determine_learning_zone(
        self, 
        activity: LearningActivity,
        context: Dict[str, Any]
    ) -> LearningZone:
        """Determinar en qu√© zona de aprendizaje est√° el estudiante"""
        
        # Calcular precisi√≥n actual
        if activity.total_attempts > 0:
            accuracy = activity.correct_answers / activity.total_attempts
        else:
            accuracy = context.get("current_accuracy", 0.7)
        
        # Considerar tiempo dedicado vs tiempo esperado
        time_efficiency = context.get("time_efficiency", 1.0)
        engagement_score = activity.engagement_score
        
        # Factores adicionales
        help_requests = activity.help_requests
        consecutive_errors = context.get("consecutive_errors", 0)
        
        # Determinar zona basada en m√∫ltiples factores
        if accuracy >= self.learning_zone_thresholds["comfort_max"] and time_efficiency < 0.7:
            return LearningZone.COMFORT  # Muy f√°cil, completando r√°pido
        
        elif (self.learning_zone_thresholds["optimal_min"] <= accuracy <= self.learning_zone_thresholds["optimal_max"] 
              and engagement_score >= 0.6 and help_requests <= 2):
            return LearningZone.OPTIMAL  # Zona perfecta
        
        elif (self.learning_zone_thresholds["challenge_min"] <= accuracy < self.learning_zone_thresholds["optimal_min"]
              and consecutive_errors <= 3 and engagement_score >= 0.4):
            return LearningZone.CHALLENGE  # Desafiante pero manejable
        
        else:
            return LearningZone.PANIC  # Muy dif√≠cil, frustraci√≥n
    
    def _determine_feedback_type(
        self,
        zone: LearningZone,
        activity: LearningActivity,
        context: Dict[str, Any]
    ) -> FeedbackType:
        """Determinar tipo de feedback apropiado seg√∫n zona y contexto"""
        
        consecutive_correct = context.get("consecutive_correct", 0)
        consecutive_errors = context.get("consecutive_errors", 0)
        recent_improvement = context.get("recent_improvement", False)
        
        if zone == LearningZone.COMFORT:
            if consecutive_correct >= 3:
                return FeedbackType.CELEBRATION
            else:
                return FeedbackType.ENCOURAGEMENT
        
        elif zone == LearningZone.OPTIMAL:
            if consecutive_correct >= 2:
                return FeedbackType.ENCOURAGEMENT
            elif consecutive_errors == 1:
                return FeedbackType.HINT
            else:
                return FeedbackType.GUIDANCE
        
        elif zone == LearningZone.CHALLENGE:
            if consecutive_errors >= 2:
                return FeedbackType.HINT
            elif recent_improvement:
                return FeedbackType.ENCOURAGEMENT
            else:
                return FeedbackType.GUIDANCE
        
        else:  # PANIC zone
            if consecutive_errors >= 3:
                return FeedbackType.CORRECTION
            elif activity.help_requests > 2:
                return FeedbackType.MOTIVATION
            else:
                return FeedbackType.WARNING
    
    def _generate_personalized_message(
        self,
        feedback_type: FeedbackType,
        learning_style: LearningStyle,
        context: Dict[str, Any]
    ) -> str:
        """Generar mensaje personalizado seg√∫n estilo de aprendizaje"""
        
        # Obtener plantillas para el estilo de aprendizaje
        style_key = learning_style.value if learning_style != LearningStyle.MULTIMODAL else "visual"
        
        if style_key not in self.feedback_templates:
            style_key = "visual"  # Fallback
        
        templates = self.feedback_templates[style_key].get(feedback_type.value, [])
        
        if not templates:
            # Fallback gen√©rico
            return self._generate_generic_message(feedback_type, context)
        
        # Seleccionar template aleatoriamente para variedad
        base_message = random.choice(templates)
        
        # Personalizar con contexto espec√≠fico
        return self._contextualize_message(base_message, context)
    
    def _generate_generic_message(
        self, 
        feedback_type: FeedbackType,
        context: Dict[str, Any]
    ) -> str:
        """Generar mensaje gen√©rico cuando no hay plantillas espec√≠ficas"""
        
        generic_messages = {
            FeedbackType.ENCOURAGEMENT: "¬°Muy bien! Est√°s progresando de manera excelente.",
            FeedbackType.CORRECTION: "Hay un peque√±o error. Revisa tu enfoque y int√©ntalo nuevamente.",
            FeedbackType.HINT: "Aqu√≠ tienes una pista para ayudarte a continuar.",
            FeedbackType.CELEBRATION: "¬°Fant√°stico! Has demostrado gran dominio del tema.",
            FeedbackType.WARNING: "Parece que este tema es desafiante. Tomemos un enfoque diferente.",
            FeedbackType.MOTIVATION: "¬°No te rindas! Cada error es una oportunidad de aprender.",
            FeedbackType.GUIDANCE: "Te gu√≠o en el proceso. Sigamos paso a paso."
        }
        
        return generic_messages.get(feedback_type, "Contin√∫a con tu buen trabajo.")
    
    def _contextualize_message(self, base_message: str, context: Dict[str, Any]) -> str:
        """A√±adir contexto espec√≠fico al mensaje base"""
        
        # A√±adir informaci√≥n espec√≠fica del rendimiento si es relevante
        accuracy = context.get("current_accuracy", 0)
        
        if accuracy and "excelente" in base_message.lower():
            if accuracy > 0.9:
                base_message += f" (Precisi√≥n: {accuracy*100:.0f}%)"
        
        # A√±adir motivaci√≥n extra si es necesario
        consecutive_errors = context.get("consecutive_errors", 0)
        if consecutive_errors >= 2 and "error" not in base_message.lower():
            base_message += " Recuerda que los errores son parte del aprendizaje."
        
        return base_message
    
    def _generate_suggested_actions(
        self,
        zone: LearningZone,
        feedback_type: FeedbackType,
        profile: StudentLearningProfile,
        activity: LearningActivity
    ) -> List[str]:
        """Generar acciones espec√≠ficas sugeridas"""
        
        actions = []
        
        if zone == LearningZone.COMFORT:
            actions.extend([
                "Intentar el pr√≥ximo nivel de dificultad",
                "Explorar conceptos m√°s avanzados",
                "Ayudar a compa√±eros con dudas similares"
            ])
        
        elif zone == LearningZone.OPTIMAL:
            actions.extend([
                "Continuar con el ritmo actual",
                "Practicar con variaciones del problema",
                "Reflexionar sobre lo aprendido"
            ])
        
        elif zone == LearningZone.CHALLENGE:
            actions.extend([
                "Revisar conceptos fundamentales",
                "Practicar con ejemplos similares",
                "Solicitar ayuda espec√≠fica en puntos dif√≠ciles"
            ])
        
        else:  # PANIC zone
            actions.extend([
                "Tomar un descanso breve",
                "Revisar material de apoyo",
                "Contactar al tutor para orientaci√≥n personalizada",
                "Practicar con ejercicios m√°s simples"
            ])
        
        # A√±adir acciones espec√≠ficas por estilo de aprendizaje
        if profile.learning_style == LearningStyle.VISUAL:
            actions.append("Ver diagramas o videos explicativos")
        elif profile.learning_style == LearningStyle.AUDITORY:
            actions.append("Escuchar explicaciones en audio")
        elif profile.learning_style == LearningStyle.KINESTHETIC:
            actions.append("Practicar con simulaciones interactivas")
        elif profile.learning_style == LearningStyle.READING_WRITING:
            actions.append("Leer material complementario")
        
        # Limitar a m√°ximo 4 acciones para no abrumar
        return actions[:4]
    
    def _calculate_feedback_confidence(
        self,
        context: Dict[str, Any],
        profile: StudentLearningProfile
    ) -> float:
        """Calcular nivel de confianza del feedback generado"""
        
        confidence = 0.5  # Base
        
        # M√°s confianza con m√°s datos hist√≥ricos
        activity_count = context.get("recent_activity_count", 1)
        confidence += min(0.3, activity_count * 0.05)
        
        # M√°s confianza si el perfil est√° bien establecido
        profile_age_days = (datetime.now() - profile.created_at).days
        confidence += min(0.15, profile_age_days * 0.01)
        
        # M√°s confianza si hay consistencia en el rendimiento
        performance_consistency = context.get("performance_consistency", 0.5)
        confidence += performance_consistency * 0.2
        
        # Ajustar por certeza del estilo de aprendizaje
        confidence += profile.learning_style_confidence * 0.1
        
        return min(1.0, confidence)
    
    def _log_feedback_analytics(
        self,
        student_id: str,
        zone: LearningZone,
        feedback_type: FeedbackType,
        confidence: float
    ) -> None:
        """Log para analytics y mejora continua del sistema"""
        
        logger.info(
            f"Feedback generated - Student: {student_id}, "
            f"Zone: {zone.value}, Type: {feedback_type.value}, "
            f"Confidence: {confidence:.2f}"
        )
    
    async def evaluate_feedback_effectiveness(
        self,
        feedback: RealTimeFeedback,
        post_feedback_performance: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Evaluar efectividad del feedback proporcionado"""
        
        # M√©tricas de mejora post-feedback
        improvement_score = post_feedback_performance.get("improvement_score", 0.0)
        engagement_change = post_feedback_performance.get("engagement_change", 0.0)
        time_to_next_success = post_feedback_performance.get("time_to_success", None)
        
        # Calcular efectividad
        effectiveness = 0.0
        
        if improvement_score > 0:
            effectiveness += 0.4 * improvement_score
        
        if engagement_change > 0:
            effectiveness += 0.3 * engagement_change
        
        if time_to_next_success and time_to_next_success < 300:  # 5 minutos
            effectiveness += 0.3
        
        effectiveness = min(1.0, effectiveness)
        
        evaluation = {
            "feedback_id": feedback.student_id + "_" + str(int(feedback.generated_at.timestamp())),
            "effectiveness_score": effectiveness,
            "improvement_detected": improvement_score > 0,
            "engagement_improved": engagement_change > 0,
            "quick_resolution": time_to_next_success and time_to_next_success < 300,
            "evaluation_timestamp": datetime.now()
        }
        
        logger.info(f"Feedback effectiveness: {effectiveness:.2f} for student {feedback.student_id}")
        
        return evaluation
    
    async def adaptive_feedback_adjustment(
        self,
        student_id: str,
        feedback_history: List[Dict[str, Any]],
        profile: StudentLearningProfile
    ) -> Dict[str, Any]:
        """Ajustar estrategia de feedback basado en efectividad hist√≥rica"""
        
        if len(feedback_history) < 5:
            return {"adjustment": "insufficient_data"}
        
        # Analizar patrones de efectividad
        recent_effectiveness = [f.get("effectiveness_score", 0.5) for f in feedback_history[-10:]]
        avg_effectiveness = np.mean(recent_effectiveness)
        
        adjustments = {
            "current_effectiveness": avg_effectiveness,
            "recommended_adjustments": []
        }
        
        if avg_effectiveness < 0.4:
            adjustments["recommended_adjustments"].extend([
                "increase_hint_frequency",
                "simplify_language",
                "add_more_encouragement"
            ])
        elif avg_effectiveness > 0.8:
            adjustments["recommended_adjustments"].extend([
                "increase_challenge_level",
                "reduce_hint_frequency", 
                "focus_on_celebration"
            ])
        
        return adjustments